import random as r

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.utils.markdown import hbold, hitalic

from mimesis import Person, Address
from mimesis.locales import Locale
from mimesis.enums import Gender

from loader import dp


from keyboards.default.country import country_kb
from keyboards.default.gender import gender_select

from states.person_gen import GeneratePerson


def send(name, birthday, email, phone, height, weight, eye, polit) -> str:
    return f"""
üë§ –ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è: {hbold(name)}
üéÇ –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è(–î,–ú,–ì): {hbold(birthday)}
üì™ –ü–æ—á—Ç–∞: {hbold(email)}
‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω: {hbold(phone)}

üì¢ –†–æ—Å—Ç: {hbold(height)} —Å–º.
‚öñÔ∏è –í–µ—Å: {hbold(weight)} –∫–≥.
üëÅÔ∏è –¶–≤–µ—Ç –≥–ª–∞–∑: {hbold(eye)}
üö® –ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –≤–∑–≥–ª—è–¥—ã: {hbold(polit)}

{hitalic('/person')} - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ª–∏—á–Ω–æ—Å—Ç—å. 
"""

@dp.message_handler(Command("person"))
async def new_person(message: types.Message, state: FSMContext):
    await message.answer("üóæ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –≤–∞—à–µ–π –ª–∏—á–Ω–æ—Å—Ç–∏.", reply_markup=country_kb)

    await GeneratePerson.select_country.set()

@dp.message_handler(text="–†–æ—Å—Å–∏—è", state=GeneratePerson.select_country)
async def select_gender(message: types.Message, state: FSMContext):
    country = message.text
    await message.answer("üë§ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –≤–∞—à–µ–π –ª–∏—á–Ω–æ—Å—Ç–∏", reply_markup=gender_select)
    
    async with state.proxy() as data:
        data["country"] = country

    await GeneratePerson.select_gender.set()


@dp.message_handler(text="–£–∫—Ä–∞–∏–Ω–∞", state=GeneratePerson.select_country)
async def ukraine(message: types.Message, state: FSMContext):
    country = message.text
    await message.answer("üë§ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –≤–∞—à–µ–π –ª–∏—á–Ω–æ—Å—Ç–∏", reply_markup=gender_select)
    
    async with state.proxy() as data:
        data["country"] = country

    await GeneratePerson.select_gender.set()

@dp.message_handler(text="–°–®–ê", state=GeneratePerson.select_country)
async def usa(message: types.Message, state: FSMContext):
    country = message.text
    await message.answer("üë§ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –≤–∞—à–µ–π –ª–∏—á–Ω–æ—Å—Ç–∏", reply_markup=gender_select)
    
    async with state.proxy() as data:
        data["country"] = country

    await GeneratePerson.select_gender.set()


@dp.message_handler(state=GeneratePerson.select_gender)
async def get_person(message: types.Message, state: FSMContext):
    country = await state.get_data("country")
    gender = message.text

    if country.get("country") == "–†–æ—Å—Å–∏—è":
        person = Person(locale=Locale.RU)
    elif country.get("country") == "–£–∫—Ä–∞–∏–Ω–∞":
        person = Person(locale=Locale.UK)
    elif country.get("country") == "–°–®–ê":
        person = Person(locale=Locale.EN)

    if gender == "–ñ–µ–Ω—Å–∫–∏–π":
        name = person.full_name(gender=Gender.FEMALE)
    elif gender == "–ú—É–∂—Å–∫–æ–π":
        name = person.full_name(gender=Gender.MALE)
    else:
        await message.answer("–ü–æ–ª –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω.")
        await state.finish()
    
    birthday = f"{r.randint(1, 30)}/{r.randint(1, 12)}/{r.randint(1980, 2015)}" # d.m.Y
    email = person.email()
    phone = person.telephone()

    height = person.height()
    weight = person.weight()
    eye_color = r.choice(["–°–∏–Ω–∏–π", "–ì–æ–ª—É–±–æ–π", "–°–µ—Ä—ã–π", "–ó–µ–ª–µ–Ω—ã–π", "–ö–∞—Ä–∏–π"])
    political_views = person.political_views()

    await message.answer(send(name, birthday, email, phone, height, weight, eye_color, political_views))

    await state.finish()